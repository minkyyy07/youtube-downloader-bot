package school.sorokin.javabot;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
public class UpdateConsumer implements LongPollingSingleThreadUpdateConsumer {

    private OkHttpTelegramClient telegramClient;
    private final String ytDlpPath;
    private String ffmpegPath; // –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ ffmpeg –∏–ª–∏ null
    private final HostedFileService hostedFileService; // –¥–æ–±–∞–≤–ª–µ–Ω–æ

    // –ö—ç—à —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π ID -> –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
    private static final Map<String, String> URL_CACHE = new ConcurrentHashMap<>();
    private static final Pattern AUDIO_CALLBACK_PATTERN = Pattern.compile("a_(mp3|orig)_([a-zA-Z0-9]{12})");
    private static final Map<Long, Boolean> LINK_PREFS = new ConcurrentHashMap<>(); // chatId -> showRawUrl

    private volatile boolean ffmpegReported = false;

    public UpdateConsumer(@Value("${telegram.bot.token}") String botToken,
                          @Value("${downloader.ytdlp.path:yt-dlp}") String ytDlpPath,
                          @Value("${ffmpeg.path:}") String ffmpegConfigured,
                          HostedFileService hostedFileService) { // –¥–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä
        this.telegramClient = new OkHttpTelegramClient(botToken);
        this.ytDlpPath = ytDlpPath;
        this.ffmpegPath = resolveFfmpegPath(ffmpegConfigured);
        this.hostedFileService = hostedFileService; // –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
    }

    @Override
    public void consume(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleTextMessage(update);
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update);
        }
    }

    private void handleTextMessage(Update update) {
        String messageText = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();
        try {
            switch (messageText) {
                case "/start" -> sendWelcomeMessage(chatId);
                case "/help" -> sendHelpMessage(chatId);
                case "/debug" -> sendDebug(chatId);
                case "/togglelink" -> toggleLinkPreference(chatId);
                default -> {
                    if (isValidUrl(messageText)) {
                        showDownloadOptions(chatId, messageText);
                    } else {
                        sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è YouTube –∏ TikTok —Å—Å—ã–ª–∫–∏.");
                    }
                }
            }
        } catch (Exception e) {
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.");
            e.printStackTrace();
        }
    }

    private void sendDebug(Long chatId) {
        StringBuilder sb = new StringBuilder();
        sb.append("yt-dlp path: ").append(ytDlpPath).append('\n');
        sb.append("yt-dlp available: ").append(isYtDlpAvailable()).append('\n');
        sb.append("ffmpeg configured path: ").append(ffmpegPath == null ? "<null>" : ffmpegPath).append('\n');
        sb.append("ffmpeg available: ").append(isFfmpegAvailable()).append('\n');
        sendMessage(chatId, sb.toString());
    }

    private void handleCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        if (callbackData.startsWith("v_")) {
            String url = extractUrlFromCallback(callbackData); // v_<id>
            if (url == null) {
                sendMessage(chatId, "‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Å–Ω–æ–≤–∞.");
                return;
            }
            downloadVideo(chatId, url);
            return;
        }
        Matcher m = AUDIO_CALLBACK_PATTERN.matcher(callbackData);
        if (m.matches()) {
            String fmt = m.group(1); // mp3 | orig
            String id = m.group(2);
            String url = URL_CACHE.get(id);
            if (url == null) {
                sendMessage(chatId, "‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Å–Ω–æ–≤–∞.");
                return;
            }
            downloadAudio(chatId, url, fmt);
            return;
        }
        sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
    }

    private void sendWelcomeMessage(Long chatId) {
        String welcomeText = """
                üé¨ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YouTube & TikTok Downloader!*
                
                üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ –∏–∑:
                ‚Ä¢ YouTube
                ‚Ä¢ TikTok
                
                –ò —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ!
                
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                """;

        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(welcomeText)
                .parseMode("Markdown")
                .build();

        executeMessage(message);
    }

    private void sendHelpMessage(Long chatId) {
        String helpText = """
                üìñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*
                
                1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
                2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –±–æ—Ç—É
                3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
                   ‚Ä¢ üìπ –í–∏–¥–µ–æ - –ø–æ–ª–Ω–æ–µ –≤–∏–¥–µ–æ
                   ‚Ä¢ üéµ –ê—É–¥–∏–æ - —Ç–æ–ª—å–∫–æ –∑–≤—É–∫–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞
                
                ‚ö° *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:*
                ‚Ä¢ YouTube (youtube.com)
                ‚Ä¢ TikTok (tiktok.com)
                
                ‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è(–í—Ä–µ–º–µ–Ω–Ω–æ):*
                ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10 –º–∏–Ω—É—Ç
                ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë
                """;

        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(helpText)
                .parseMode("Markdown")
                .build();

        executeMessage(message);
    }

    private void showDownloadOptions(Long chatId, String url) {
        String id = UUID.randomUUID().toString().replace("-", "").substring(0, 12);
        URL_CACHE.put(id, url);

        InlineKeyboardButton openUrlBtn = InlineKeyboardButton.builder()
                .text("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É")
                .url(url)
                .build();
        InlineKeyboardButton videoBtn = InlineKeyboardButton.builder()
                .text("üìπ –í–∏–¥–µ–æ")
                .callbackData("v_" + id)
                .build();
        InlineKeyboardButton audioMp3Btn = InlineKeyboardButton.builder()
                .text("üéµ MP3 128k")
                .callbackData("a_mp3_" + id)
                .build();
        InlineKeyboardButton audioOrigBtn = InlineKeyboardButton.builder()
                .text("üéµ –û—Ä–∏–≥–∏–Ω–∞–ª")
                .callbackData("a_orig_" + id)
                .build();

        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
                .keyboardRow(new InlineKeyboardRow(openUrlBtn))
                .keyboardRow(new InlineKeyboardRow(videoBtn))
                .keyboardRow(new InlineKeyboardRow(audioMp3Btn, audioOrigBtn))
                .build();

        String body = "üîó –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª:\n" + url;
        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(body)
                .disableWebPagePreview(true)
                .replyMarkup(keyboard)
                .build();

        executeMessage(message);
    }

    private void downloadVideo(Long chatId, String url) {
        sendMessage(chatId, "‚è¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...");
        CompletableFuture.runAsync(() -> {
            try {
                String fileName = downloadContent(chatId, url, "video");
                if (fileName != null) {
                    sendFile(chatId, fileName, "üìπ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!");
                    File f = new File(fileName);
                    if (f.exists() && f.length() <= 50L * 1024 * 1024) {
                        deleteFile(fileName);
                    }
                } else {
                    sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.");
                }
            } catch (Exception e) {
                sendMessage(chatId, "ÔøΩÔøΩ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.");
                e.printStackTrace();
            }
        });
    }

    private void downloadAudio(Long chatId, String url, String fmt) {
        sendMessage(chatId, "‚è¨ –ê—É–¥–∏–æ ‚Äî –Ω–∞—á–∏–Ω–∞—é...");
        CompletableFuture.runAsync(() -> {
            try {
                String downloaded = downloadBestAudio(chatId, url);
                if (downloaded == null) return;
                sendFile(chatId, downloaded, "üéµ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ!");
                File f = new File(downloaded);
                if (f.exists() && f.length() <= 50L * 1024 * 1024) {
                    deleteFile(downloaded);
                }
            } catch (Exception e) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ.");
                e.printStackTrace();
            }
        });
    }

    // --- ffmpeg detection helpers ---
    private String resolveFfmpegPath(String configured) {
        if (configured != null && !configured.isBlank()) {
            if (fileExecutable(configured) || versionOk(configured)) return configured;
        }
        String env = System.getenv("FFMPEG_PATH");
        if (env != null && !env.isBlank()) {
            if (fileExecutable(env) || versionOk(env)) return env;
        }
        // common locations
        List<String> candidates = List.of(
                "ffmpeg",
                "/opt/homebrew/bin/ffmpeg",
                "/usr/local/bin/ffmpeg",
                "/usr/bin/ffmpeg"
        );
        for (String c : candidates) {
            if (fileExecutable(c) || versionOk(c)) return c;
        }
        return null;
    }

    private boolean fileExecutable(String pathStr) {
        try {
            Path p = Path.of(pathStr);
            return java.nio.file.Files.exists(p) && java.nio.file.Files.isExecutable(p);
        } catch (Exception e) {
            return false;
        }
    }

    private boolean versionOk(String cmd) {
        try {
            Process p = new ProcessBuilder(cmd, "-version").start();
            boolean ok = p.waitFor(4, java.util.concurrent.TimeUnit.SECONDS) && p.exitValue() == 0;
            if (!ok) p.destroyForcibly();
            return ok;
        } catch (Exception e) {
            return false;
        }
    }

    private boolean isFfmpegAvailable() {
        if (ffmpegPath != null) return true;
        ffmpegPath = resolveFfmpegPath(null);
        if (ffmpegPath != null && !ffmpegReported) {
            ffmpegReported = true; // –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–ª–∞–¥–∫—É; –æ—Ç–∫–ª—é—á–µ–Ω–æ —á—Ç–æ–±—ã –Ω–µ —à—É–º–µ—Ç—å
        }
        return ffmpegPath != null;
    }

    private String ensureMp3(Long chatId, String fileName) {
        if (fileName.endsWith(".mp3")) return fileName;
        if (!isFfmpegAvailable()) {
            sendMessage(chatId, "‚ö†Ô∏è ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.");
            return fileName;
        }
        try {
            String target = fileName.replaceFirst("\\.[^.]+$", "") + "_conv.mp3";
            ProcessBuilder pb = new ProcessBuilder(
                    ffmpegPath, "-y", "-i", fileName, "-vn", "-ac", "2", "-ar", "44100", "-b:a", "128k", target
            );
            pb.redirectErrorStream(true);
            Process p = pb.start();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))) { while (br.readLine() != null) {} }
            p.waitFor();
            if (p.exitValue() == 0 && Files.exists(Paths.get(target))) {
                return target;
            } else {
                sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ mp3 (ffmpeg –æ—à–∏–±–∫–∞). –û—Ç–ø—Ä–∞–≤–ª—è—é –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª.");
                return fileName;
            }
        } catch (Exception e) {
            sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ mp3, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª.");
            return fileName;
        }
    }

    private String downloadContent(Long chatId, String url, String type) {
        try {
            if (!isYtDlpAvailable()) {
                sendMessage(chatId, "‚ö†Ô∏è yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.");
                return null;
            }
            boolean needMp3 = "audio".equals(type);
            boolean ffmpegAvailable = !needMp3 || isFfmpegAvailable();
            if (needMp3 && !ffmpegAvailable) {
                sendMessage(chatId, "‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∞—É–¥–∏–æ-—Ñ–∞–π–ª –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.");
            }

            String baseName = "download_" + System.currentTimeMillis();
            String targetFile = baseName + ("video".equals(type) ? ".mp4" : ".mp3");

            Set<String> before = snapshotFiles();
            ProcessBuilder pb = new ProcessBuilder(buildCommandEnhanced(url, type, targetFile, ffmpegAvailable));
            pb.redirectErrorStream(true);
            Process process = pb.start();
            StringBuilder log = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = br.readLine()) != null) {
                    log.append(line).append('\n');
                }
            }
            boolean finished = process.waitFor(Duration.ofMinutes(7).toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS);
            if (!finished) {
                process.destroyForcibly();
                sendMessage(chatId, "‚è± –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.");
                return null;
            }
            int exit = process.exitValue();
            if (exit != 0) {
                String logStr = log.toString();
                if (logStr.toLowerCase().contains("ffmpeg")) {
                    sendMessage(chatId, "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ mp3: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg.");
                } else {
                    sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∫–æ–¥ " + exit + ").");
                }
                return null;
            }
            // –ü—Ä—è–º–æ–π —Ñ–∞–π–ª (–¥–ª—è –≤–∏–¥–µ–æ –∏–ª–∏ mp3 –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
            if (Files.exists(Paths.get(targetFile))) {
                // –µ—Å–ª–∏ –∞—É–¥–∏–æ –±–µ–∑ ffmpeg: –∏–º—è –±—É–¥–µ—Ç baseName.<origExt>; targetFile (mp3) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–µ
            }
            Set<String> after = snapshotFiles();
            after.removeAll(before);
            String chosen = after.stream().filter(f -> f.startsWith(baseName + ".")).findFirst().orElse(null);
            if (chosen != null) {
                if (needMp3 && ffmpegAvailable && !chosen.endsWith(".mp3")) {
                    sendMessage(chatId, "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ mp3.");
                }
                return chosen;
            }
            sendMessage(chatId, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.");
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.");
        }
        return null;
    }

    private boolean isYtDlpAvailable() {
        try {
            Process p = new ProcessBuilder(ytDlpPath, "--version").start();
            boolean finished = p.waitFor(3, java.util.concurrent.TimeUnit.SECONDS);
            if (!finished) {
                p.destroyForcibly();
                return false;
            }
            return p.exitValue() == 0;
        } catch (Exception e) {
            return false;
        }
    }

    private Set<String> snapshotFiles() {
        try (var stream = Files.list(Paths.get("."))) {
            Set<String> set = new HashSet<>();
            stream.filter(p -> !Files.isDirectory(p)).forEach(p -> set.add(p.getFileName().toString()));
            return set;
        } catch (Exception e) {
            return new HashSet<>();
        }
    }

    private java.util.List<String> buildCommandEnhanced(String url, String type, String targetFile, boolean ffmpegAvailable) {
        java.util.List<String> cmd = new java.util.ArrayList<>();
        cmd.add(ytDlpPath);
        if ("video".equals(type)) {
            cmd.addAll(java.util.List.of("-f", "best[height<=720]", "-o", targetFile, url));
        } else { // audio
            // targetFile = baseName + ".mp3" (–µ—Å–ª–∏ ffmpegAvailable) –∏–Ω–∞—á–µ baseName + ".mp3" –Ω–æ –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π ext
            String base = targetFile.endsWith(".mp3") ? targetFile.substring(0, targetFile.length() - 4) : targetFile;
            if (ffmpegAvailable) {
                cmd.addAll(java.util.List.of("-f", "bestaudio", "-x", "--audio-format", "mp3", "-o", base + ".%(ext)s", url));
            } else {
                // –±–µ–∑ ffmpeg: –ø—Ä–æ—Å—Ç–æ bestaudio –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞, –Ω–æ –∏–º—è –≤—Å—ë —Ä–∞–≤–Ω–æ baseName.ext —á—Ç–æ–±—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å
                cmd.addAll(java.util.List.of("-f", "bestaudio", "-o", base + ".%(ext)s", url));
            }
        }
        return cmd;
    }

    private void sendFile(Long chatId, String fileName, String caption) {
        try {
            File file = new File(fileName);
            long fileSize = file.length();
            if (fileSize > 50 * 1024 * 1024) { // 50MB limit -> –≤—ã–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                String id = hostedFileService.register(file);
                String url = hostedFileService.buildUrl(id);
                sendLinkMessage(chatId, "–§–∞–π–ª >50–ú–ë. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è):", "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", url);
                return;
            }

            SendDocument document = SendDocument.builder()
                    .chatId(chatId.toString())
                    .document(new InputFile(file))
                    .caption(caption)
                    .build();

            telegramClient.execute(document);
        } catch (TelegramApiException e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.");
            e.printStackTrace();
        }
    }

    private void toggleLinkPreference(Long chatId) {
        boolean current = LINK_PREFS.getOrDefault(chatId, true);
        boolean next = !current;
        LINK_PREFS.put(chatId, next);
        sendMessage(chatId, next ? "–¢–µ–ø–µ—Ä—å —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º." : "–¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏.");
    }

    private void sendLinkMessage(Long chatId, String text, String buttonText, String url) {
        boolean showRaw = LINK_PREFS.getOrDefault(chatId, true);
        if (!isValidButtonUrl(url)) {
            // Fallback: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –±–µ–∑ inline-–∫–Ω–æ–ø–∫–∏ (–∏–Ω–∞—á–µ Telegram –≤–µ—Ä–Ω—ë—Ç 400)
            String body = showRaw ? text + "\n" + url : text;
            SendMessage msg = SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(body)
                    .disableWebPagePreview(true)
                    .build();
            executeMessage(msg);
            return;
        }
        InlineKeyboardButton btn = InlineKeyboardButton.builder().text(buttonText).url(url).build();
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboardRow(new InlineKeyboardRow(btn))
                .build();
        String body = showRaw ? text + "\n[" + buttonText + "](" + url + ")" : text;
        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(body)
                .parseMode("Markdown")
                .replyMarkup(markup)
                .disableWebPagePreview(true)
                .build();
        executeMessage(message);
    }

    private boolean isValidButtonUrl(String url) {
        if (url == null || url.isBlank()) return false;
        if (!(url.startsWith("https://") || url.startsWith("http://"))) return false;
        String lower = url.toLowerCase();
        // –ë–ª–æ–∫–∏—Ä—É–µ–º localhost –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã Telegram
        if (lower.contains("localhost") || lower.contains("127.0.0.1")) return false;
        if (lower.matches("https?://10\\..*")) return false;
        if (lower.matches("https?://192\\.168\\..*")) return false;
        if (lower.matches("https?://172\\.(1[6-9]|2[0-9]|3[0-1])\\..*")) return false;
        return true;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ 0x0.st (–∞–Ω–æ–Ω–∏–º–Ω–æ)
    private String uploadTo0x0(File file) {
        try {
            ProcessBuilder pb = new ProcessBuilder("curl", "-s", "-F", "file=@" + file.getAbsolutePath(), "https://0x0.st");
            pb.redirectErrorStream(true);
            Process p = pb.start();
            StringBuilder sb = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
                String line; while ((line = br.readLine()) != null) sb.append(line); }
            p.waitFor();
            String resp = sb.toString().trim();
            if (resp.startsWith("https://0x0.st/")) return resp;
            return "ERROR:" + resp;
        } catch (Exception e) {
            return "ERROR: " + e.getMessage();
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ catbox.moe (–∞–Ω–æ–Ω–∏–º–Ω–æ)
    private String uploadToCatbox(File file) {
        try {
            ProcessBuilder pb = new ProcessBuilder(
                    "curl",
                    "-F", "reqtype=fileupload",
                    "-F", "fileToUpload=@" + file.getAbsolutePath(),
                    "https://catbox.moe/user/api.php"
            );
            pb.redirectErrorStream(true);
            Process p = pb.start();
            StringBuilder sb = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
                String line; while ((line = br.readLine()) != null) sb.append(line).append('\n');
            }
            p.waitFor();
            String resp = sb.toString().trim();
            // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            if (resp.startsWith("https://")) return resp;
            return "ERROR:" + resp;
        } catch (Exception e) {
            return "ERROR: " + e.getMessage();
        }
    }

    private String uploadToFileIo(File file) {
        try {
            ProcessBuilder pb = new ProcessBuilder("curl", "-F", "file=@" + file.getAbsolutePath(), "https://file.io");
            pb.redirectErrorStream(true);
            Process p = pb.start();
            StringBuilder sb = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line).append('\n');
                }
            }
            p.waitFor();
            String result = sb.toString().trim();
            // file.io –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –≤–∏–¥–∞: {"success":true,"link":"https://file.io/xxxxxx",...}
            if (result.contains("https://file.io/")) {
                int start = result.indexOf("https://file.io/");
                int end = result.indexOf('"', start);
                if (end > start) {
                    return result.substring(start, end);
                } else {
                    return result.substring(start);
                }
            } else {
                return "ERROR:" + result;
            }
        } catch (Exception e) {
            return "ERROR: " + e.getMessage();
        }
    }

    private String uploadToGoFile(File file) {
        try {
            ProcessBuilder pbServer = new ProcessBuilder("curl", "-s", "https://api.gofile.io/getServer");
            pbServer.redirectErrorStream(true);
            Process pServer = pbServer.start();
            StringBuilder sbServer = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(pServer.getInputStream()))) {
                String line; while ((line = br.readLine()) != null) sbServer.append(line); }
            pServer.waitFor();
            String serverJson = sbServer.toString();
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞–º–µ–Ω–∞ regex –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥)
            String server = extractJsonString(serverJson, "server");
            if (server == null || server.isBlank()) return "ERROR: gofile getServer raw=" + serverJson;
            String uploadUrl = "https://" + server + ".gofile.io/uploadFile";
            ProcessBuilder pb = new ProcessBuilder("curl", "-s", "-F", "file=@" + file.getAbsolutePath(), uploadUrl);
            pb.redirectErrorStream(true);
            Process p = pb.start();
            StringBuilder sb = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
                String line; while ((line = br.readLine()) != null) sb.append(line); }
            p.waitFor();
            String result = sb.toString().trim();
            if (result.contains("https://gofile.io/d/")) {
                int start = result.indexOf("https://gofile.io/d/");
                int end = result.indexOf('"', start);
                if (end > start) return result.substring(start, end); else return result.substring(start);
            }
            return "ERROR:" + result;
        } catch (Exception e) {
            return "ERROR: " + e.getMessage();
        }
    }

    private String uploadToPixelDrain(File file) {
        try {
            ProcessBuilder pb = new ProcessBuilder(
                    "curl","-s","-X","POST","-F","file=@" + file.getAbsolutePath(),"https://pixeldrain.com/api/file"
            );
            pb.redirectErrorStream(true);
            Process p = pb.start();
            StringBuilder sb = new StringBuilder();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
                String line; while ((line = br.readLine()) != null) sb.append(line).append('\n');
            }
            p.waitFor();
            String json = sb.toString();
            java.util.regex.Matcher m = java.util.regex.Pattern.compile("\"id\"\\s*:\\s*\"([^\"]+)\"").matcher(json);
            if (m.find()) {
                return "https://pixeldrain.com/u/" + m.group(1);
            }
            return "ERROR:" + json.trim();
        } catch (Exception e) {
            return "ERROR: " + e.getMessage();
        }
    }

    private boolean isValidUrl(String url) {
        return url.contains("youtube.com") || url.contains("youtu.be") || url.contains("tiktok.com");
    }

    private String extractUrlFromCallback(String callbackData) {
        int idx = callbackData.indexOf('_');
        if (idx < 0 || idx == callbackData.length() - 1) return null;
        String id = callbackData.substring(idx + 1);
        return URL_CACHE.get(id);
    }

    private void deleteFile(String fileName) {
        try {
            Files.deleteIfExists(Paths.get(fileName));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String downloadBestAudio(Long chatId, String url) {
        try {
            if (!isYtDlpAvailable()) {
                sendMessage(chatId, "‚ö†Ô∏è yt-dlp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.");
                return null;
            }
            String baseName = "download_" + System.currentTimeMillis();
            String pattern = baseName + ".%(ext)s";
            Set<String> before = snapshotFiles();
            ProcessBuilder pb = new ProcessBuilder(ytDlpPath, "-f", "bestaudio", "-o", pattern, url);
            pb.redirectErrorStream(true);
            Process p = pb.start();
            try (BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
                while (br.readLine() != null) {}
            }
            boolean finished = p.waitFor(6, java.util.concurrent.TimeUnit.MINUTES);
            if (!finished) {
                p.destroyForcibly();
                sendMessage(chatId, "‚è± –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ.");
                return null;
            }
            if (p.exitValue() != 0) {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ (–∫–æ–¥ " + p.exitValue() + ").");
                return null;
            }
            Set<String> after = snapshotFiles();
            after.removeAll(before);
            return after.stream().filter(f -> f.startsWith(baseName + ".")).findFirst().orElseGet(() -> {
                sendMessage(chatId, "‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return null;
            });
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ.");
            return null;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
     */
    private void sendMessage(Long chatId, String text) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .build();
        executeMessage(message);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
     */
    private void executeMessage(SendMessage message) {
        try {
            telegramClient.execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private boolean isOk0x0(String url) {
        return url != null && url.startsWith("https://0x0.st/");
    }

    private String extractJsonString(String json, String key) {
        if (json == null || key == null) return null;
        int k = json.indexOf('"' + key + '"');
        if (k < 0) return null;
        int colon = json.indexOf(':', k);
        if (colon < 0) return null;
        int first = json.indexOf('"', colon + 1);
        if (first < 0) return null;
        int second = json.indexOf('"', first + 1);
        if (second < 0) return null;
        return json.substring(first + 1, second);
    }
}
